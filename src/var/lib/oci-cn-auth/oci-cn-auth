#!/usr/bin/env python3
"""

Oracle Cloud - Cluster Network authentication helper
(c) 2020,2021 Oracle

"""
import os
import sys
import argparse
import configparser
from random import randint
from time import sleep
import lib.util
import lib.metadata

config = configparser.ConfigParser()

if __name__ == "__main__":

	uid = os.geteuid()
	if uid != 0:
		print("Error: oci-cn-auth needs to be run as sudo or root privileges")
		sys.exit(1)

	parser = argparse.ArgumentParser(description='Save authentication data for 802.1X')
	parser.add_argument('-i', '--info', action='store_true')
	parser.add_argument('-c', '--config', default='/etc/rdma/oracle_rdma.conf')
	parser.add_argument('--interface')
	parser.add_argument('--start', action='store_true')

	args = parser.parse_args()
	config.sections()
	config.read(args.config)

	if not config.get('DEFAULT', 'private_key'):
		print("Private key location not found in the configuration file.")
		sys.exit(1)

	if not config.get('DEFAULT', 'password'):
		print("Private key password not found in the configuration file.")
		sys.exit(1)

	if not config.get('DEFAULT', 'auto'):
		if not config.get('DEFAULT', 'interfaces'):
			print("Interface definitions not found in the configuration file.")
			sys.exit(1)

	if args.start:
		# Print the version to serial console and stdout
		with open('/var/lib/oci-cn-auth/.version-oci-cn-auth') as f:
			version = f.readline()
			version = version.strip()
			cmd = f'echo oci-cn-auth: {version} > /dev/console'
			print(f'oci-cn-auth {version}')
			os.system(cmd)

	if args.interface:
		interfaces = [args.interface]
	else:
		interfaces = lib.util.interface_list(config)

	if args.info:
		lib.util.check_certificates(config, write=False)
		lib.util.check_configs(config, write=False)

		for interface in interfaces:
			i = lib.util.WpaSupplicantService(interface)
			lib.util.check_units(config, interface, write=False, start=False)
			print(f"auth: {i.is_authenticated}")

	else:
		reload = lib.util.check_certificates(config, write=True)
		reload_configs = lib.util.check_configs(config, write=True)

		for interface in interfaces:
			i = lib.util.WpaSupplicantService(interface)

			changed = lib.util.check_units(config, interface, write=True, start=True)
			if changed:
				sleep(randint(5, 15))
				lib.util.reload_wpa_supplicant(interface)

			if reload or reload_configs:
				sleep(randint(5, 15))
				i.reconfigure()
